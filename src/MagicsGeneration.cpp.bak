#include "ChessEngine.hpp"
#include "Attack.hpp"
#include "Utils.hpp"
#include <random>

auto GetOccupancy(int index, Bitboard attack_mask) {
    Bitboard occupancy = 0ULL;
    const auto mask_population = Utils::BitCount(attack_mask);
    for (int count = 0; count < mask_population; count++) {
        auto square = Utils::PopLS1B(attack_mask);
        if (index & (1 << count))
            occupancy |= (1ULL << square);
    } return occupancy;
}
std::mt19937_64 rng64(123456);

template <EnumPiece Piece>
auto FindMagicNumber(EnumSquare square) noexcept {
    constexpr auto FixedShift = Piece == Bishops ? 64-9 : 64-12;
    std::array<Bitboard, 4096> occupancies = { };
    std::array<Bitboard, 4096> attacks = { };
    std::array<Bitboard, 4096> used_attacks = { };
    auto attack_mask   = GetAttack<Piece>::MaskTable[square];
    auto relevant_bits = GetAttack<Piece>::MaskBitCount[square];
    int occupancy_idx = 1 << relevant_bits;

    for (int idx = 0; idx < occupancy_idx; idx++) {
        occupancies[idx] = GetOccupancy(idx, attack_mask);
        attacks[idx] = SliderAttacks<Piece>::On(square, occupancies[idx]);
    }

    for (int random_count = 0; random_count < 10000000; random_count++) {
        Bitboard magic = rng64() & rng64() & rng64();
        if (Utils::BitCount((attack_mask * magic) ^ 56) < 6) continue;
        used_attacks.fill(0x00);
        int idx, fail;
        for (idx = 0, fail = 0; !fail && idx < occupancy_idx; idx++ ) {
            Bitboard magic_idx = (occupancies[idx] * magic) >> FixedShift;//relevant_bits);
            if (used_attacks[magic_idx] == 0ULL)
                used_attacks[magic_idx] = attacks[idx];
            else if (used_attacks[magic_idx] != attacks[idx]) fail = 1;
        } if (!fail) return magic;
    }
    std::cout << "magic failed\n";
    return Bitboard(0);
}

template <EnumPiece Piece>
auto GenerateAndPrintMagicNumbers() noexcept {
    constexpr auto PieceName = Piece == Bishops ? "<Bishops>" : "<Rooks>";
    std::cout << "template<>\n"
        << "constexpr inline std::array<Bitboard, 64> Magics" << PieceName << "{\n";
    for (EnumSquare square = a1; square <= h8; ++square)
        std::cout << std::hex << "0x" << FindMagicNumber<Piece>(square) << "ULL,\n";
    std::cout << "};\n\n";
}
